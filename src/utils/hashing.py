from typing import List

# Random permutation of the range [0, 255]. We use a constant permutation for reproducibility.
TABLE = [130, 146, 154, 127, 10, 68, 222, 140, 17, 78, 118, 93, 252, 209, 183, 48, 178, 246, 145, 47, 39, 219, 227, 107, 237, 187, 41, 255, 168, 8, 139, 4, 190, 156, 0, 229, 6, 83, 186, 100, 153, 208, 211, 44, 87, 55, 151, 56, 86, 35, 147, 19, 45, 220, 20, 79, 64, 67, 194, 58, 205, 231, 203, 138, 51, 15, 201, 173, 132, 233, 155, 72, 142, 198, 251, 53, 33, 244, 196, 200, 188, 238, 172, 214, 159, 90, 182, 108, 7, 158, 131, 191, 14, 241, 29, 101, 225, 84, 75, 69, 62, 197, 111, 216, 162, 141, 49, 37, 232, 91, 236, 109, 128, 18, 169, 97, 221, 71, 95, 24, 92, 102, 170, 177, 54, 161, 123, 189, 207, 85, 199, 16, 226, 120, 224, 210, 150, 43, 248, 22, 3, 114, 133, 65, 143, 31, 242, 34, 61, 82, 179, 112, 11, 135, 81, 5, 235, 184, 25, 122, 32, 212, 66, 193, 60, 115, 77, 163, 104, 57, 1, 165, 40, 223, 152, 218, 38, 176, 88, 76, 250, 106, 46, 36, 249, 213, 129, 73, 166, 124, 234, 110, 74, 240, 30, 202, 175, 27, 204, 116, 126, 96, 171, 13, 239, 247, 164, 134, 63, 253, 28, 254, 167, 23, 26, 125, 160, 230, 12, 195, 103, 136, 52, 181, 59, 174, 2, 149, 121, 157, 98, 113, 215, 228, 105, 137, 206, 117, 50, 180, 144, 21, 148, 42, 192, 119, 9, 70, 243, 80, 245, 94, 89, 217, 185, 99]


def pearson_hash(message: str) -> int:
    """
    Simple implementation of a pearson hash function that uses a simple
    permutation function instead of an explicit lookup table. To make this compatible
    with microcontrollers, we design for a 16 bit output.
    """
    hash_elements: List[int] = []

    for j in range(2):
        h = TABLE[(ord(message[0]) + j) % 256]

        for i in range(1, len(message)):
            h = TABLE[h ^ ord(message[i])]

        hash_elements.append(h)

    return (hash_elements[0] << 8) | (hash_elements[1])
